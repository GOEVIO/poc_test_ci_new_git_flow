declare const _default: {
    connect: (dbName: string) => Promise<import("./interfaces/interfaces").IMongoDBConnection>;
    close: (dbName: string, db: any) => Promise<void>;
    insertDocument: (db: import("mongoose").Connection, collectionName: string, document: object) => Promise<import("mongodb").InsertOneResult<import("mongoose").AnyObject>>;
    findDocuments: (db: import("mongoose").Connection, collectionName: string, query: object, fieldsToReturn?: any, sort?: any) => Promise<any>;
    findOneDocument: (db: import("mongoose").Connection, collectionName: string, query: object, fieldsToReturn?: any) => Promise<any>;
    findDocumentsByIdArray: (db: import("mongoose").Connection, collectionName: string, idArray: string[], fieldsToReturn?: any) => Promise<any>;
    updateDocument: (db: import("mongoose").Connection, collectionName: string, query: object, update: object, options?: import("mongodb").UpdateOptions) => Promise<import("mongodb").UpdateResult<import("mongoose").AnyObject>>;
    deleteDocument: (db: import("mongoose").Connection, collectionName: string, query: object) => Promise<import("mongodb").DeleteResult>;
    aggregateDocuments: (db: import("mongoose").Connection, collectionName: string, pipeline: object[]) => Promise<any>;
    upsertDocument: (db: import("mongoose").Connection, collectionName: string, query: object, update: object) => Promise<import("mongodb").UpdateResult<import("mongoose").AnyObject>>;
    updateDocuments: (db: import("mongoose").Connection, collectionName: string, query: object, update: object) => Promise<import("mongodb").UpdateResult<import("mongoose").AnyObject>>;
    findOneDocumentAndUpdate: (db: import("mongoose").Connection, collectionName: string, query: object, update: object, filters?: any) => Promise<import("mongodb").ModifyResult<import("mongoose").AnyObject>>;
    stringToObjectId: (string: any) => import("bson").ObjectId;
    bulkWriteDocuments: (db: import("mongoose").Connection, collectionName: string, operations: import("mongodb").AnyBulkWriteOperation[], options?: object) => Promise<import("mongodb").BulkWriteResult>;
    updateDocumentsWithOptions: (db: import("mongoose").Connection, collectionName: string, query: object, update: object, options?: object) => Promise<import("mongodb").UpdateResult<import("mongoose").AnyObject>>;
    findDocumentWithOptions: (db: import("mongoose").Connection, collectionName: string, query: object, options?: object) => Promise<import("mongodb").WithId<import("mongoose").AnyObject>>;
    deleteDocuments: (db: import("mongoose").Connection, collectionName: string, query: object) => Promise<import("mongodb").DeleteResult>;
};
export default _default;
export * from './classes/db.client';
