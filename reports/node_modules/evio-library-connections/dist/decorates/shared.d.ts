import { ObjectId, AnyBulkWriteOperation } from 'mongodb';
import * as mongoose from 'mongoose';
export declare const connect: (dbName: string) => Promise<import("../interfaces/interfaces").IMongoDBConnection>;
export declare const close: (dbName: string, db: any) => Promise<void>;
export declare const findDocuments: (db: mongoose.Connection, collectionName: string, query: object, fieldsToReturn?: any, sort?: any) => Promise<any>;
export declare const findOneDocument: (db: mongoose.Connection, collectionName: string, query: object, fieldsToReturn?: any) => Promise<any>;
export declare const findDocumentsByIdArray: (db: mongoose.Connection, collectionName: string, idArray: string[], fieldsToReturn?: any) => Promise<any>;
export declare const insertDocument: (db: mongoose.Connection, collectionName: string, document: object) => Promise<mongoose.mongo.InsertOneResult<mongoose.AnyObject>>;
export declare const updateDocument: (db: mongoose.Connection, collectionName: string, query: object, update: object, options?: mongoose.mongo.UpdateOptions) => Promise<mongoose.mongo.UpdateResult<mongoose.AnyObject>>;
export declare const deleteDocument: (db: mongoose.Connection, collectionName: string, query: object) => Promise<mongoose.mongo.DeleteResult>;
export declare const aggregateDocuments: (db: mongoose.Connection, collectionName: string, pipeline: object[]) => Promise<any>;
export declare const upsertDocument: (db: mongoose.Connection, collectionName: string, query: object, update: object) => Promise<mongoose.mongo.UpdateResult<mongoose.AnyObject>>;
export declare const updateDocuments: (db: mongoose.Connection, collectionName: string, query: object, update: object) => Promise<mongoose.mongo.UpdateResult<mongoose.AnyObject>>;
export declare const countDocuments: (db: mongoose.Connection, collectionName: string, query: object) => Promise<number>;
export declare const findOneDocumentAndUpdate: (db: mongoose.Connection, collectionName: string, query: object, update: object, filters?: any) => Promise<mongoose.mongo.ModifyResult<mongoose.AnyObject>>;
export declare const stringToObjectId: (string: any) => ObjectId;
export declare const bulkWriteDocuments: (db: mongoose.Connection, collectionName: string, operations: AnyBulkWriteOperation[], options?: object) => Promise<mongoose.mongo.BulkWriteResult>;
export declare const updateDocumentsWithOptions: (db: mongoose.Connection, collectionName: string, query: object, update: object, options?: object) => Promise<mongoose.mongo.UpdateResult<mongoose.AnyObject>>;
export declare const findDocumentWithOptions: (db: mongoose.Connection, collectionName: string, query: object, options?: object) => Promise<mongoose.mongo.WithId<mongoose.AnyObject>>;
export declare const deleteDocuments: (db: mongoose.Connection, collectionName: string, query: object) => Promise<mongoose.mongo.DeleteResult>;
