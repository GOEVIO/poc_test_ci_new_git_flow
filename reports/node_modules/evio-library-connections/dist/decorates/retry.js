"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetryDecorator = void 0;
const decorators_1 = require("./decorators");
class RetryDecorator extends decorators_1.MongoDBConnectionManagerDecorator {
    constructor(manager, maxRetries = 3, retryInterval = 1000) {
        super(manager);
        this.maxRetries = maxRetries;
        this.retryInterval = retryInterval;
    }
    async connect() {
        for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
            try {
                return await super.connect();
            }
            catch (error) {
                if (attempt < this.maxRetries) {
                    await this.sleep(this.retryInterval);
                }
                else {
                    throw error;
                }
            }
        }
        throw new Error('RetryDecorator: Unable to connect to MongoDB after multiple attempts');
    }
    sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
}
exports.RetryDecorator = RetryDecorator;
//# sourceMappingURL=retry.js.map