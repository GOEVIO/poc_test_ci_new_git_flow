import * as mongoose from 'mongoose';
import { IMongoDBConnectionManager } from '../interfaces/interfaces';
import { MongoDBConnectionManagerDecorator } from './decorators';

export class RetryDecorator extends MongoDBConnectionManagerDecorator {
  private maxRetries: number;
  private retryInterval: number; // in milliseconds

  constructor(
    manager: IMongoDBConnectionManager,
    maxRetries = 3,
    retryInterval = 1000
  ) {
    super(manager);
    this.maxRetries = maxRetries;
    this.retryInterval = retryInterval;
  }

  async connect(): Promise<mongoose.Connection> {
    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      try {
        return await super.connect();
      } catch (error) {
        if (attempt < this.maxRetries) {
          await this.sleep(this.retryInterval);
        } else {
          throw error;
        }
      }
    }
    throw new Error(
      'RetryDecorator: Unable to connect to MongoDB after multiple attempts'
    );
  }

  private sleep(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
}
