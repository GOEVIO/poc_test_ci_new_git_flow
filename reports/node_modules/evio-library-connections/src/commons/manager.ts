import * as mongoose from 'mongoose';
import { ConnectionStates } from 'mongoose';
import { IMongoDBConnectionManager } from '../interfaces/interfaces';

export class MongoDBConnectionManager implements IMongoDBConnectionManager {
  private _uri: string;
  private _databaseName: string;
  private client: mongoose.Connection | null;
  private database: mongoose.Connection | null;

  constructor(uri: string, databaseName: string) {
    this._uri = uri;
    this._databaseName = databaseName;
    this.client = null;
    this.database = null;
  }

  async connect(): Promise<mongoose.Connection> {
    if (this.client && this.database && this.isConnectionValid()) {
      return this.database;
    }
    this.client = mongoose.createConnection(this._uri);

    this.database = this.client.useDb(this._databaseName);
    return this.database;
  }

  async close(): Promise<void> {
    if (this.client) {
      await this.client.close();
      this.client = null;
      this.database = null;
    }
  }

  checkConnections(): void {
    if (this.client && !this.isConnectionValid()) {
      console.log('Connection state is different than connected.');
      this.close();
    }
  }

  private isConnectionValid(): boolean {
    return this.client.readyState !== ConnectionStates.connected;
  }
}
