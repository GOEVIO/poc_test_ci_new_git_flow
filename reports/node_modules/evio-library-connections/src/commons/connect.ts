import { MongoDBConnectionManager } from './manager';
import { LoggingDecorator } from '../decorates/logging';
import { RetryDecorator } from '../decorates/retry';
import { IMongoDBConnection } from '../interfaces/interfaces';

export class DbConnection {
  private _host: string;
  private _dbName: string;

  constructor(host: string, dbName: string) {
    this._host = host;
    this._dbName = dbName;
  }

  async connect(): Promise<IMongoDBConnection> {
    // Create the base connection manager
    const baseManager = new MongoDBConnectionManager(this._host, this._dbName);

    // Decorate the connection manager with logging
    const loggingManager = new LoggingDecorator(baseManager);

    // Further decorate with retry mechanism
    const retryManager = new RetryDecorator(loggingManager);

    // Use the decorated manager to connect to the database
    try {
      const db = await retryManager.connect();
      return {
        db: db,
        close: async () => {
          await retryManager.close();
        },
        checkConnections: () => {
          retryManager.checkConnections();
        },
      };
    } catch (error) {
      console.error('Error connecting to MongoDB:', error);
    }
  }

  async close(db: any): Promise<void> {
    try {
      // Check and manage connections
      db.checkConnections();

      // Close the connection
      await db.close();
    } catch (error) {
      console.error('Error disconnecting to MongoDB:', error);
    }
  }
}
