"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ioredis_1 = __importDefault(require("ioredis"));
const constants_1 = require("./utils/constants");
const enums_1 = require("./enums/enums");
class RedisConnection {
    async connect() {
        if (this.connected) {
            console.log(`üîó Redis Connection already exists`);
            return;
        }
        console.log(`‚åõÔ∏è Connecting to Redis Server`);
        const options = process.env.LOCAL === "development" ? {
            host: "127.0.0.1",
            port: 6379,
        } : {
            sentinels: constants_1.sentinelsConfig,
            name: constants_1.masterName,
            connectionName: constants_1.serviceName,
            commandTimeout: constants_1.commandTimeoutInMilli
        };
        this.connection = new ioredis_1.default(options);
        console.log(`‚úÖ Redis Connection is ready`);
        this.connected = true;
    }
    async disconnect() {
        if (!this.connected) {
            console.log(`üîó Redis Connection does not exist`);
            return;
        }
        console.log(`‚åõÔ∏è Disconnecting from Redis Server`);
        await this.connection.quit();
        this.connected = false;
        console.log(`‚úÖ Redis Connection is closed`);
    }
    async get(key) {
        if (!this.connected) {
            await this.connect();
        }
        return this.connection.get(key);
    }
    async set(key, value) {
        if (!this.connected) {
            await this.connect();
        }
        await this.connection.set(key, value);
    }
    async hset(key, value) {
        if (!this.connected) {
            await this.connect();
        }
        await this.connection.hset(key, value);
    }
    async setWithMilliseconds(key, value, timeValue) {
        if (!this.connected) {
            await this.connect();
        }
        await this.connection.set(key, value, enums_1.TimeUnitEnum.Milliseconds, timeValue);
    }
    async setWithSeconds(key, value, timeValue) {
        if (!this.connected) {
            await this.connect();
        }
        await this.connection.set(key, value, enums_1.TimeUnitEnum.Seconds, timeValue);
    }
    async delete(key) {
        if (!this.connected) {
            await this.connect();
        }
        await this.connection.del(key);
    }
    async keys(pattern) {
        if (!this.connected) {
            await this.connect();
        }
        return this.connection.keys(pattern);
    }
}
const redisConnection = new RedisConnection();
exports.default = redisConnection;
//# sourceMappingURL=index.js.map