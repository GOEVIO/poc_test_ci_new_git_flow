import Redis from "ioredis";
import { sentinelsConfig, masterName, commandTimeoutInMilli, serviceName } from "./utils/constants";
import { TimeUnitEnum } from "./enums/enums";
import { Value } from "./types/types";

class RedisConnection {
  connection!: Redis;
  private connected!: Boolean;

  async connect() : Promise<void> {
    if (this.connected) {
      console.log(`üîó Redis Connection already exists`);
      return;
    }

      console.log(`‚åõÔ∏è Connecting to Redis Server`);

      // If LOCAL is set to development, use local Redis server
      const options = process.env.LOCAL === "development" ?  {
        host: "127.0.0.1",
        port: 6379,
      } : {
        sentinels: sentinelsConfig,
        name: masterName,
        connectionName: serviceName,
        commandTimeout: commandTimeoutInMilli
      };

      this.connection = new Redis(options);     

      console.log(`‚úÖ Redis Connection is ready`);

      this.connected = true;
  }

  async disconnect(): Promise<void> {
    if (!this.connected) {
      console.log(`üîó Redis Connection does not exist`) ;
      return;
    }
    console.log(`‚åõÔ∏è Disconnecting from Redis Server`);
    await this.connection.quit();
    this.connected = false;
    console.log(`‚úÖ Redis Connection is closed`);
  }


  async get(key: string): Promise<string | null> {
    if (!this.connected) {
      await this.connect();
    }

    return this.connection.get(key);
  }

  /**
   * Set a key value pair in Redis without TTL, take care!
   * @param key
   * @param value
   */
  async set(key: string, value: Value): Promise<void> {
    if (!this.connected) {
      await this.connect();
    }

    await this.connection.set(key, value);
  }

    /**
   * Set a key value pair in Redis without TTL, take care!
   * @param key
   * @param value
   */
    async hset(key: string, value: Value): Promise<void> {
      if (!this.connected) {
        await this.connect();
      }
  
      await this.connection.hset(key, value);
    }

  /**
   * Set a key value pair in Redis with TTL in milliseconds
   * @param key
   * @param value
   * @param timeValue
   */
  async setWithMilliseconds(key: string, value: Value, timeValue: number): Promise<void> {
    if (!this.connected) {
      await this.connect();
    }

    await this.connection.set(key, value, TimeUnitEnum.Milliseconds, timeValue);
  }

  /**
   * Set a key value pair in Redis with TTL in seconds
   * @param key
   * @param value
   * @param timeValue
   */
  async setWithSeconds(key: string, value: Value, timeValue: number): Promise<void> {
    if (!this.connected) {
      await this.connect();
    }

    await this.connection.set(key, value, TimeUnitEnum.Seconds, timeValue);
  }

  /**
   * Remove a key by name
   * @param key
   */
  async delete(key: string): Promise<void> {
    if (!this.connected) {
      await this.connect();
    }

    await this.connection.del(key);
  }

  /**
   * Get keys
   * @param pattern
   */
  async keys(pattern: string): Promise<string[]> {
    if (!this.connected) {
      await this.connect();
    }

    return this.connection.keys(pattern);
  }

}

const redisConnection: RedisConnection = new RedisConnection();

export default redisConnection;
