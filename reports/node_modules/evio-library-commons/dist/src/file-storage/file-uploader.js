"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadBase64 = uploadBase64;
exports.uploadBuffer = uploadBuffer;
exports.deleteByKey = deleteByKey;
exports.deleteByUrl = deleteByUrl;
exports.deleteManyByUrl = deleteManyByUrl;
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
const constants_1 = require("../constants");
async function uploadBase64(data, opts = {}) {
    const baseFolder = constants_1.filePaths[opts?.type || "root"];
    const { contentType: inferredCT, base64 } = (0, utils_1.parseDataUrl)(data);
    const contentType = opts.contentType || inferredCT;
    const buffer = Buffer.from(base64, "base64");
    const ext = (0, utils_1.extFromContentType)(contentType) || "";
    const key = `${opts.keyPrefix ?? ""}${opts.fileName ?? (0, utils_1.randomName)(ext.replace(/^\./, ""))}`;
    const filePath = (0, utils_1.safeJoin)(baseFolder.path, key);
    await (0, utils_1.ensureDir)(path_1.default.dirname(filePath));
    await promises_1.default.writeFile(filePath, buffer);
    const url = `${baseFolder.url}/${key}`;
    return { bucket: "", key, url };
}
async function uploadBuffer(buffer, opts = {}) {
    const baseFolder = constants_1.filePaths[opts?.type || "root"];
    const key = `${opts.keyPrefix ?? ""}${opts.fileName ?? (0, utils_1.randomName)()}`;
    const filePath = (0, utils_1.safeJoin)(baseFolder.path, key);
    await (0, utils_1.ensureDir)(path_1.default.dirname(filePath));
    await promises_1.default.writeFile(filePath, buffer);
    const url = `${baseFolder.url}/${key}`;
    return { bucket: "", key, url };
}
async function deleteByKey(key, type) {
    const baseFolder = constants_1.filePaths[type || "root"];
    const root = baseFolder.path;
    if (!root)
        throw new Error("Missing FILE_STORAGE_ROOT");
    const filePath = (0, utils_1.safeJoin)(root, key);
    await promises_1.default.rm(filePath, { force: true });
}
async function deleteByUrl(url) {
    const type = (0, utils_1.getFileTypeFromUrl)(url);
    const key = (0, utils_1.keyFromUrl)(url);
    await deleteByKey(key, type);
}
async function deleteManyByUrl(urls) {
    if (!urls?.length)
        return;
    await Promise.all(urls.map((u) => deleteByUrl(u)));
}
//# sourceMappingURL=file-uploader.js.map