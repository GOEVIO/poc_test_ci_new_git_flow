"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeJoin = exports.ensureDir = exports.keyFromUrl = exports.extFromContentType = exports.parseDataUrl = exports.randomName = void 0;
exports.getFileTypeFromUrl = getFileTypeFromUrl;
const crypto_1 = __importDefault(require("crypto"));
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("../constants");
const randomName = (ext = "") => `${Date.now()}_${crypto_1.default.randomBytes(6).toString("hex")}${ext ? "." + ext : ""}`;
exports.randomName = randomName;
const parseDataUrl = (input) => {
    const hasHeader = input.startsWith("data:");
    if (!hasHeader)
        return { contentType: "application/octet-stream", base64: input };
    const match = input.match(/^data:([^;]+);base64,(.+)$/);
    if (!match)
        throw new Error("Invalid data URL");
    const [, meta, b64] = match;
    return { contentType: meta, base64: b64 };
};
exports.parseDataUrl = parseDataUrl;
const extFromContentType = (ct) => {
    if (!ct)
        return "";
    const map = {
        "image/png": ".png",
        "image/jpeg": ".jpg",
        "image/jpg": ".jpg",
        "image/webp": ".webp",
        "image/svg+xml": ".svg",
    };
    return map[ct] || "";
};
exports.extFromContentType = extFromContentType;
const keyFromUrl = (url) => {
    const base = constants_1.filePaths.root.url;
    const prefix = base.endsWith("/") ? base : base + "/";
    if (!url.startsWith(prefix))
        throw new Error(`URL does not start with ${prefix}`);
    return url.substring(prefix.length);
};
exports.keyFromUrl = keyFromUrl;
function getFileTypeFromUrl(url) {
    const entry = Object.entries(constants_1.filePaths).find(([_, val]) => url.startsWith(val.url));
    return entry?.[0] ?? "root";
}
const ensureDir = async (dir) => {
    await promises_1.default.mkdir(path_1.default.resolve(dir), { recursive: true });
};
exports.ensureDir = ensureDir;
const safeJoin = (root, key) => {
    const p = path_1.default.resolve(root, key);
    const rootNorm = path_1.default.resolve(root) + path_1.default.sep;
    if (!p.startsWith(rootNorm))
        throw new Error("Invalid key path");
    return p;
};
exports.safeJoin = safeJoin;
//# sourceMappingURL=utils.js.map