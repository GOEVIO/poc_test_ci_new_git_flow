"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filePaths = exports.defaultTin = exports.MinimumEnergyToBilling = exports.HubjectCommission = exports.defaultCpoTariffId = exports.providers = exports.dinCountryMapper = exports.allowedCountriesShortSender = exports.alpha2CountryMapper = exports.alpha3CountryMapper = exports.checkDigitLists = exports.emails = exports.OcpiToken = exports.oneDayInMilliseconds = exports.Energy = exports.Environment = exports.AssetTypes = exports.ChargerTypesMap = exports.RabbitmqQueueNames = exports.AllowedCountries3 = exports.AllowedCountries = exports.TableNames = exports.CollectionNames = exports.DBNames = void 0;
const path_1 = __importDefault(require("path"));
exports.DBNames = {
    Configs: 'configsDB',
    Chargers: 'chargersDB',
    PublicNetworks: 'publicNetworkDB',
    Billing: 'billingDB',
    Identity: 'identityDB',
    Evs: 'evsDB',
    Statistics: 'statisticsDB',
    PublicTariffs: 'publicTariffsDB',
    OCPI: 'ocpiDB',
    Tariffs: 'tariffsDB',
    APT: 'apt_db',
    Tokens: 'tokenDB',
};
exports.CollectionNames = {
    Configs: {
        Fees: 'fees',
        CoordinatesSessionsConfigs: 'coordinatessessionsconfigs',
        rabbitMQConfigs: 'rabbitmqconfigs',
        validationCDRConfig: 'validationcdrconfigs',
        AppConfigurations: 'appconfigurations',
        chargerPreAuthorizationValues: 'chargerpreauthorizationvalues',
    },
    Chargers: {
        Chargers: 'chargers',
        ChargerTypes: 'chargertypes',
        Infrastructures: 'infrastructures',
        ChargingSessions: 'chargingsessions',
    },
    Billing: {
        Invoices: 'invoices',
    },
    Identity: {
        Contracts: 'contracts',
        Drivers: 'drivers',
        GroupDrivers: 'groupdrivers',
        GroupCSUsers: 'groupcsusers',
        Users: 'users',
        BillingProfiles: 'billingprofiles',
        TokenHistory: 'tokenhistory',
    },
    Evs: {
        Evs: 'evs',
        DatabaseEvs: 'database_evs',
        Fleets: 'fleets',
    },
    Statistics: {
        Histories: 'histories',
        HistoriesV2: 'historiesv2',
        ThirdPartyProductMaps: 'thirdpartyproductmaps',
        Configs: 'Configs',
    },
    PublicTariffs: {
        ListCEMEs: 'listcemes',
        ScheduleCEMEs: 'schedulescemes',
        TariffCEMEs: 'tariffcemes',
        TariffTars: 'tarifftars',
    },
    PublicNetworks: {
        Operators: 'operators',
    },
    OCPI: {
        Tokens: 'tokens',
        Platforms: 'platforms',
        Tariffs: 'tariffs',
        SessionFlowLogs: 'sessionflowlogs',
        ChargingSessions: 'chargingsessions',
    },
    Tariffs: {
        SalesTariffs: 'salestariffs',
    },
    Tokens: {
        Tokens: 'tokens'
    },
};
exports.TableNames = {
    APT: {
        Apt: 'apt_stations',
        Chargers: 'apt_chargers',
        Plugs: 'apt_charger_plugs',
        TariffsDetails: 'apt_plugs_tariffs_details',
        TariffElements: 'apt_tariff_elements',
        TariffRestrictions: 'apt_tariff_restrictions',
        TariffPriceComponents: 'apt_tariff_price_components',
    },
};
exports.AllowedCountries = ['PT', 'FR', 'ES'];
exports.AllowedCountries3 = ['PRT', 'FRA', 'ESP'];
exports.RabbitmqQueueNames = {
    updateHistoryV2: 'session_history_v2',
};
exports.ChargerTypesMap = {
    '001': 'EVIO',
    '002': 'EVIO',
    '003': 'EVIO',
    '004': 'MOBIE',
    '005': 'EVIO',
    '006': 'EVIO',
    '007': 'EVIO',
    '008': 'EVIO',
    '009': 'TESLA',
    '010': 'INTERNATIONAL NETWORK',
    '011': 'GO.CHARGE',
    '012': 'HYUNDAI',
    '013': 'KLC',
    '014': 'KINTO',
    '015': 'INTERNATIONAL NETWORK',
};
exports.AssetTypes = ['car', 'otherEv', 'boat', 'motorcycle', 'bicycle', 'truck', 'card', 'employee'];
exports.Environment = (process.env.NODE_ENV || 'development');
exports.Energy = {
    supplierName: 'ENGNE',
    contracts: {
        production: {
            dailyBi: 'CT_HUQ87P9EOPC0JFE3GDU60UPPTF',
            dailyTri: 'CT_G6SML9HRDG0JCP9IE6TOQTIGT6',
            weeklyBi: 'CT_ILPA216UQMRP0I9OT137R1HMRC',
            weeklyTri: 'CT_TQNHA3QJNV3ILJGJSBVBLV5QUO',
        },
        'pre-production': {
            dailyBi: 'CT_HUQ87P9EOPC0JFE3GDU60UPPTF',
            dailyTri: 'CT_G6SML9HRDG0JCP9IE6TOQTIGT6',
            weeklyBi: 'CT_ILPA216UQMRP0I9OT137R1HMRC',
            weeklyTri: 'CT_TQNHA3QJNV3ILJGJSBVBLV5QUO',
        },
        development: {
            dailyBi: 'CT_HUQ87P9EOPC0JFE3GDU60UPPT1',
            dailyTri: 'CT_G6SML9HRDG0JCP9IE6TOQTIGT3',
            weeklyBi: 'CT_ILPA216UQMRP0I9OT137R1HMR2',
            weeklyTri: 'CT_TQNHA3QJNV3ILJGJSBVBLV5QU4',
        },
    },
};
exports.oneDayInMilliseconds = 86400000;
exports.OcpiToken = {
    whitelist: {
        never: 'NEVER',
        always: 'ALWAYS',
    },
    issuer: 'EVIO - Electrical Mobility',
};
exports.emails = {
    SupportEvio: 'support@go-evio.com',
    Sales: 'sales@go-evio.com',
    QaTest: 'qa.goevio@gmail.com',
};
var digitLists_json_1 = require("./digitLists.json");
Object.defineProperty(exports, "checkDigitLists", { enumerable: true, get: function () { return __importDefault(digitLists_json_1).default; } });
var alpha3CountryMapper_json_1 = require("./alpha3CountryMapper.json");
Object.defineProperty(exports, "alpha3CountryMapper", { enumerable: true, get: function () { return __importDefault(alpha3CountryMapper_json_1).default; } });
var alpha2CountryMapper_json_1 = require("./alpha2CountryMapper.json");
Object.defineProperty(exports, "alpha2CountryMapper", { enumerable: true, get: function () { return __importDefault(alpha2CountryMapper_json_1).default; } });
exports.allowedCountriesShortSender = [
    '+351',
    '+34',
    '+33',
    '+31',
    '+352',
    '+353',
    '+39',
    '+40',
    '+41',
    '+43',
    '+44',
    '+46',
    '+47',
    '+48',
    '+49',
];
var dinCountryMapper_json_1 = require("./dinCountryMapper.json");
Object.defineProperty(exports, "dinCountryMapper", { enumerable: true, get: function () { return __importDefault(dinCountryMapper_json_1).default; } });
exports.providers = {
    europeCommission: {
        wsdl: 'https://ec.europa.eu/taxation_customs/vies/checkVatService.wsdl',
        wsdlTin: 'https://ec.europa.eu/taxation_customs/tin/services/checkTinService.wsdl',
    },
    taxIdPro: {
        host: 'https://v3.api.taxid.pro/lookup',
    },
};
exports.defaultCpoTariffId = 'DEFAULT-TARIFF';
exports.HubjectCommission = 0.55;
exports.MinimumEnergyToBilling = 500;
exports.defaultTin = '999999990';
const basePath = require.main ? path_1.default.dirname(require.main.filename) : process.cwd();
const baseUrl = process.env.FILES_HOST || 'https://filesapi.go-evio.com';
exports.filePaths = {
    root: {
        path: basePath,
        url: baseUrl,
    },
    cpoIcon: {
        path: path_1.default.join(basePath, 'img/icons/cpo'),
        url: `${baseUrl}/icons/cpo`,
    },
};
__exportStar(require("./contracts.constants"), exports);
//# sourceMappingURL=index.js.map