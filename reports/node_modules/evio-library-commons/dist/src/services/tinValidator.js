"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const soap = __importStar(require("soap"));
const axios_1 = __importDefault(require("axios"));
const Sentry = __importStar(require("@sentry/node"));
const error_handler_common_1 = require("../error/error.handler.common");
const constants_1 = require("../constants");
const TinType_1 = require("../enums/TinType");
class TINValidator {
}
_a = TINValidator;
TINValidator.validViesVat = async (countryCode, tinNumber) => {
    try {
        console.log(`[${_a.name}][validViesVat][Start] ${JSON.stringify({ countryCode, tinNumber })}`);
        const client = await soap.createClientAsync(constants_1.providers.europeCommission.wsdl);
        const response = await client.checkVatAsync({ countryCode, vatNumber: tinNumber });
        const invalidResponse = response.length === 0 || response[0].valid === undefined;
        if (invalidResponse) {
            console.log(`[${_a.name}][validViesVat][Error] Invalid Response! ${JSON.stringify({ response })}`);
            throw new Error(`Invalid response from VIES`);
        }
        const valid = response[0]?.valid ?? false;
        console.log(`[${_a.name}][validViesVat][Response] valid: ${valid}`);
        return valid;
    }
    catch (error) {
        throw (0, error_handler_common_1.ServerError)({
            code: 'tin_validation_failed',
            message: error?.message || 'Error validating Tax Number',
        });
    }
};
TINValidator.getTaxIdPro = async (country, tin) => {
    try {
        console.log(`[${_a.name}][getTaxIdPro][Start] ${JSON.stringify({ country, tin })}`);
        if (!process.env.TAXIDPRO_API_KEY) {
            console.error(`[${_a.name}][getTaxIdPro][Error] Missing TAXIDPRO_API_KEY`);
            throw new Error(`Missing TAXIDPRO_API_KEY`);
        }
        const { data } = await axios_1.default.get(constants_1.providers.taxIdPro.host, { params: { country, tin, api_key: process.env.TAXIDPRO_API_KEY } });
        const invalidResponse = data.is_valid === undefined || data.lookup_data === undefined || data.lookup_data.is_valid === undefined;
        if (invalidResponse) {
            console.warn(`[${_a.name}][getTaxIdPro][Error] Invalid Format! ${JSON.stringify({ data })}`);
            throw new Error(`Invalid response`);
        }
        console.log(`[${_a.name}][getTaxIdPro][Response] ${JSON.stringify({ data })}`);
        return data;
    }
    catch (error) {
        throw (0, error_handler_common_1.ServerError)({
            code: 'tin_validation_failed',
            message: error?.message || 'Error validating Tax Number',
        });
    }
};
TINValidator.getClassification = async (countryCode, tinNumber) => {
    console.log(`[${_a.name}][getClassification][Start] ${JSON.stringify({ countryCode, tinNumber })}`);
    try {
        const validViesVat = await _a.validViesVat(countryCode, tinNumber);
        if (validViesVat) {
            console.log(`[${_a.name}][getClassification][Response] Company with viesVat!`);
            return { clientType: TinType_1.TinType.BUSINESS, viesVat: true };
        }
        const getTaxIdPro = await _a.getTaxIdPro(countryCode, tinNumber);
        if (!getTaxIdPro.is_valid) {
            console.warn(`[${_a.name}][getClassification][Response] validTaxIdPro is not valid!`);
            return (0, error_handler_common_1.NotFound)({
                code: 'tin_not_found',
                message: `TIN not found`,
            });
        }
        if (getTaxIdPro.lookup_data.is_valid) {
            console.log(`[${_a.name}][getClassification][Response] Company NOT viesVat!`);
            return { clientType: TinType_1.TinType.BUSINESS, viesVat: false };
        }
        console.log(`[${_a.name}][getClassification][Response] Private NOT viesVat!`);
        return { clientType: TinType_1.TinType.PRIVATE, viesVat: false };
    }
    catch (error) {
        console.error(`[${_a.name}][getClassification][Error] ${JSON.stringify(error)}`);
        Sentry.captureException(error);
        return (0, error_handler_common_1.ServerError)({
            code: 'tin_validation_failed',
            message: 'Error validating Tax Number',
        });
    }
};
exports.default = TINValidator;
//# sourceMappingURL=tinValidator.js.map