"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const http_status_codes_1 = require("http-status-codes");
const tinValidator_1 = __importDefault(require("../services/tinValidator"));
const TinType_1 = require("../enums/TinType");
(0, globals_1.describe)('TIN Validation', () => {
    (0, globals_1.describe)('validViesVat', () => {
        (0, globals_1.it)('should return true for a TIN with VIES VAT', async () => {
            const mock = globals_1.jest.spyOn(tinValidator_1.default, 'validViesVat').mockResolvedValue(true);
            (0, globals_1.expect)(await tinValidator_1.default.validViesVat('PT', '123456789')).toBe(true);
            mock.mockRestore();
        });
        (0, globals_1.it)('should return false for a TIN without VIES VAT', async () => {
            const mock = globals_1.jest.spyOn(tinValidator_1.default, 'validViesVat').mockResolvedValue(false);
            (0, globals_1.expect)(await tinValidator_1.default.validViesVat('PT', '123456789')).toBe(false);
            mock.mockRestore();
        });
    });
    (0, globals_1.describe)('getTaxIdPro', () => {
        (0, globals_1.it)('should return true for valid Portuguese TIN', async () => {
            const mock = globals_1.jest.spyOn(tinValidator_1.default, 'getTaxIdPro').mockResolvedValue({
                country_name: 'Portugal',
                tin_compact: '123456789',
                tin_standard: 'PT123456789',
                format_name: 'Standard',
                is_valid: true,
                message: 'Valid TIN',
                lookup_data: {
                    is_valid: false,
                    name: '',
                    address: ''
                }
            });
            (0, globals_1.expect)(await tinValidator_1.default.getTaxIdPro('PT', '123456789')).toHaveProperty('is_valid', true);
            mock.mockRestore();
        });
        (0, globals_1.it)('should return false for invalid Portuguese TIN', async () => {
            const mock = globals_1.jest.spyOn(tinValidator_1.default, 'getTaxIdPro').mockResolvedValue({
                country_name: '',
                tin_compact: '',
                tin_standard: '',
                format_name: '',
                is_valid: false,
                message: 'Invalid TIN',
                lookup_data: {
                    is_valid: false,
                    name: '',
                    address: ''
                }
            });
            (0, globals_1.expect)(await tinValidator_1.default.getTaxIdPro('PT', '123456789')).toHaveProperty('is_valid', false);
            mock.mockRestore();
        });
        (0, globals_1.it)('should return true for a valid private TIN', async () => {
            const mock = globals_1.jest.spyOn(tinValidator_1.default, 'getTaxIdPro').mockResolvedValue({
                country_name: 'Portugal',
                tin_compact: '123456789',
                tin_standard: 'PT123456789',
                format_name: 'Standard',
                is_valid: true,
                message: 'Valid TIN',
                lookup_data: {
                    is_valid: false,
                    name: '',
                    address: ''
                }
            });
            (0, globals_1.expect)(await tinValidator_1.default.getTaxIdPro('PT', '123456789')).toMatchObject({
                is_valid: true,
                lookup_data: {
                    is_valid: false
                }
            });
            mock.mockRestore();
        });
        (0, globals_1.it)('should return true for a valid business TIN', async () => {
            const mock = globals_1.jest.spyOn(tinValidator_1.default, 'getTaxIdPro').mockResolvedValue({
                country_name: 'Portugal',
                tin_compact: '123456789',
                tin_standard: 'PT123456789',
                format_name: 'Standard',
                is_valid: true,
                message: 'Valid TIN',
                lookup_data: {
                    is_valid: true,
                    name: 'Portuguese Company',
                    address: '123 Main St, Lisbon, Portugal'
                }
            });
            (0, globals_1.expect)(await tinValidator_1.default.getTaxIdPro('PT', '123456789')).toHaveProperty('lookup_data.is_valid', true);
            mock.mockRestore();
        });
    });
    (0, globals_1.describe)('getClassification', () => {
        (0, globals_1.it)('should return business TIN with VIES VAT', async () => {
            const mockViesVat = globals_1.jest.spyOn(tinValidator_1.default, 'validViesVat').mockResolvedValue(true);
            const mockGetTaxIdPro = globals_1.jest.spyOn(tinValidator_1.default, 'getTaxIdPro').mockResolvedValue({
                country_name: 'Portugal',
                tin_compact: '123456789',
                tin_standard: 'PT123456789',
                format_name: 'Standard',
                is_valid: true,
                message: 'Valid TIN',
                lookup_data: {
                    is_valid: true,
                    name: 'Portuguese Company',
                    address: '123 Main St, Lisbon, Portugal'
                }
            });
            (0, globals_1.expect)(await tinValidator_1.default.getClassification('PT', '123456789')).toEqual({
                clientType: TinType_1.TinType.BUSINESS,
                viesVat: true
            });
            mockViesVat.mockRestore();
            mockGetTaxIdPro.mockRestore();
        });
        (0, globals_1.it)('should return not found for invalid TIN', async () => {
            const mockViesVat = globals_1.jest.spyOn(tinValidator_1.default, 'validViesVat').mockResolvedValue(false);
            const mockGetTaxIdPro = globals_1.jest.spyOn(tinValidator_1.default, 'getTaxIdPro').mockResolvedValue({
                country_name: '',
                tin_compact: '',
                tin_standard: '',
                format_name: '',
                is_valid: false,
                message: 'Invalid TIN',
                lookup_data: {
                    is_valid: false,
                    name: '',
                    address: ''
                }
            });
            (0, globals_1.expect)(await tinValidator_1.default.getClassification('PT', '123456789')).toHaveProperty('statusCode', http_status_codes_1.StatusCodes.NOT_FOUND);
            mockViesVat.mockRestore();
            mockGetTaxIdPro.mockRestore();
        });
        (0, globals_1.it)('should return business TIN without VIES VAT', async () => {
            const mockViesVat = globals_1.jest.spyOn(tinValidator_1.default, 'validViesVat').mockResolvedValue(false);
            const mockGetTaxIdPro = globals_1.jest.spyOn(tinValidator_1.default, 'getTaxIdPro').mockResolvedValue({
                country_name: 'Portugal',
                tin_compact: '123456789',
                tin_standard: 'PT123456789',
                format_name: 'Standard',
                is_valid: true,
                message: 'Valid TIN',
                lookup_data: {
                    is_valid: true,
                    name: 'Portuguese Company',
                    address: '123 Main St, Lisbon, Portugal'
                }
            });
            (0, globals_1.expect)(await tinValidator_1.default.getClassification('PT', '123456789')).toEqual({
                clientType: TinType_1.TinType.BUSINESS,
                viesVat: false
            });
            mockViesVat.mockRestore();
            mockGetTaxIdPro.mockRestore();
        });
        (0, globals_1.it)('should return private TIN without VIES VAT', async () => {
            const mockViesVat = globals_1.jest.spyOn(tinValidator_1.default, 'validViesVat').mockResolvedValue(false);
            const mockGetTaxIdPro = globals_1.jest.spyOn(tinValidator_1.default, 'getTaxIdPro').mockResolvedValue({
                country_name: 'Portugal',
                tin_compact: '123456789',
                tin_standard: 'PT123456789',
                format_name: 'Standard',
                is_valid: true,
                message: 'Valid TIN',
                lookup_data: {
                    is_valid: false,
                    name: '',
                    address: ''
                }
            });
            (0, globals_1.expect)(await tinValidator_1.default.getClassification('PT', '123456789')).toEqual({
                clientType: TinType_1.TinType.PRIVATE,
                viesVat: false
            });
            mockViesVat.mockRestore();
            mockGetTaxIdPro.mockRestore();
        });
    });
});
//# sourceMappingURL=tinValidation.test.js.map