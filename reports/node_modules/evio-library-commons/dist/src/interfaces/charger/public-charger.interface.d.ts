export type RoundGranularity = "UNIT" | "TENTH" | "HUNDREDTH" | "THOUSANDTH";
export type RoundRule = "ROUND_UP" | "ROUND_DOWN" | "ROUND_NEAR";
export interface PriceRound {
    round_granularity: RoundGranularity;
    round_rule: RoundRule;
}
export interface StepRound {
    round_granularity: RoundGranularity;
    round_rule: RoundRule;
}
export interface PriceComponent {
    _id?: string;
    type?: string;
    price?: number;
    vat?: number;
    step_size?: number;
    price_round?: PriceRound;
    step_round?: StepRound;
}
export interface TariffRestrictions {
    day_of_week?: string[];
    min_duration?: number;
    start_time?: string;
    end_time?: string;
    start_date?: string;
    end_date?: string;
    min_kwh?: number;
    max_kwh?: number;
    min_current?: number;
    max_current?: number;
    min_power?: number;
    max_power?: number;
    max_duration?: number;
    reservation?: "RESERVATION" | "RESERVATION_EXPIRES";
}
export interface Element {
    _id?: string;
    price_components?: PriceComponent[];
    restrictions?: TariffRestrictions;
}
export interface Price {
    excl_vat?: number;
    incl_vat?: number;
}
export interface Tariff {
    id?: string;
    currency?: string;
    min_price?: Price;
    max_price?: Price;
    elements?: Element[];
    type: string;
}
export interface CostByTime {
    minTime?: number;
    step_size?: number;
    cost?: number;
    uom?: string;
}
export interface CostByPower {
    cost?: number;
    step_size?: number;
    uom?: string;
}
export interface ServiceCost {
    initialCost?: number;
    costByTime?: CostByTime[];
    costByPower?: CostByPower;
    elements?: Element[];
    tariffs?: Tariff[];
    currency?: string;
}
export interface Plug {
    id?: string;
    plugId?: string;
    uid?: string;
    evse_id?: string;
    connectorFormat?: string;
    connectorType?: string;
    connectorPowerType?: string;
    termsAndConditions?: string;
    tariffId?: string[];
    power?: number;
    voltage?: number;
    amperage?: number;
    status?: string;
    statusChangeDate?: Date;
    statusTime?: number;
    subStatus?: string;
    evseGroup?: string;
    serviceCost?: ServiceCost;
    capabilities?: string[];
    statusSchedule?: object[];
    floorLevel?: string;
    physicalReference?: string;
    directions?: object[];
    parkingRestrictions?: string[];
    images?: object[];
    lastUpdated?: string;
    hasRemoteCapabilities?: boolean;
    co2Emissions?: string | null;
}
export interface Address {
    street?: string;
    number?: string;
    floor?: string;
    zipCode?: string;
    city?: string;
    state?: string;
    country?: string;
    countryCode?: string;
}
export interface Range {
    startTime?: string;
    endTime?: string;
}
export interface Day {
    isSelected?: boolean;
    availabilityDay?: string;
    ranges?: Range[];
}
export interface Availability {
    availabilityType?: string;
    monday?: Day;
    tuesday?: Day;
    wednesday?: Day;
    thursday?: Day;
    friday?: Day;
    saturday?: Day;
    sunday?: Day;
}
export interface Charger {
    id: string;
    hwId: string;
    chargerType: string;
    source?: string;
    partyId?: string;
    countryCode?: string;
    cpoCountryCode?: string;
    country?: string;
    name?: string;
    operatorID?: string;
    address?: Address;
    parkingType?: string;
    geometry?: {
        type: string;
        coordinates: number[];
    };
    availability?: Availability;
    status?: string;
    subStatus?: string;
    chargingDistance?: string;
    imageContent?: string[];
    defaultImage?: string;
    rating?: number;
    numberOfSessions?: number;
    dataProviderReference?: string;
    plugs?: Plug[];
    network?: string;
    operator?: string;
    stationIdentifier?: string;
    model?: string;
    manufacturer?: string;
    voltageLevel?: string;
    timeZone?: string;
    wrongBehaviorStation?: boolean;
    lastUpdated?: string;
    operationalStatus?: string;
    evseGroup?: string;
    publish?: boolean;
    mobie_access_type?: string;
    mobie_cpe?: string;
    directions?: object[];
    maxServiceCost?: Omit<ServiceCost, "tariffs">;
    originalCoordinates?: {
        type: string;
        coordinates: number[];
    };
    updatedCoordinates?: {
        date?: Date;
        source?: "algorithm" | "user" | "evio";
    };
    createdAt?: Date;
    updatedAt?: Date;
}
