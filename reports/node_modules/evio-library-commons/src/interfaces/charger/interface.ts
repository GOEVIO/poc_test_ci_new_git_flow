import { IAddress} from '../adrees.interface'

export interface ICostByPower {
  id?: string
  cost: number
  uom?: string
}

export interface ICostByTime {
  id?: string
  minTime: number
  maxTime: number
  cost: number
  uom?: string
  description?: string
}

export interface IServiceCost {
  id?: string
  initialCost: number
  costByTime: ICostByTime[]
  costByPower: ICostByPower
}

export interface IRanges {
  startTime?: string
  endTime?: string
}

export interface IDay {
  isSelected: boolean
  availabilityDay?: string
  ranges: IRanges[]
}

export interface IAvailability {
  availabilityType?: string
  monday: IDay
  tuesday: IDay
  wednesday: IDay
  thursday: IDay
  friday: IDay
  saturday: IDay
  sunday: IDay
}

export interface ITariff {
  activationFee: number
  bookingAmount: {
    uom?: string
    value: number
  }
  chargingAmount: {
    uom?: string
    value: number
  }
  parkingDuringChargingAmount: {
    uom?: string
    value: number
  }
  parkingAmount: {
    uom?: string
    value: number
  }
  evioCommission: {
    minAmount: {
      uom?: string
      value: number
    }
    transaction: {
      uom?: string
      value: number
    }
  }
}

export interface ITariffIds {
  tariffId?: string
  network?: string
}

export interface IBalancingInfoSchema {
  priority?: string
  electricalGroup: number
  
  operationalState?: string
  setCurrentLimit: number
  currentLimit: number
  power: number
  powerMax: number
  totalCurrent: number
  current1: number
  current2: number
  current3: number
  currentPerPhase: number
  voltage1: number
  voltage2: number
  voltage3: number
  voltage: number
  dailyEnergy: number
  energy: number
  browseName?: string
  isWithError: boolean
  isOnline: boolean
  lastMeasurement: { type: Date } 
  controlType?: string
  minActivePower: number
  numberOfPhases: number
}

export interface IPlugs {
  plugId?: string
  qrCodeId?: string
  
  tariff: [
    {
      groupName?: string
      groupId?: string
      tariffId?: string
      fleetName?: string
      fleetId?: string
      tariff: ITariff
      tariffType?: string
      name?: string
    },
  ]
  connectorType?: string
  voltage: number
  amperage: number
  power: number
  active: boolean
  status: string
  statusChangeDate: { type: Date }
  statusTime: number
  subStatus?: string
  serviceCost: IServiceCost
  canBeNotified: boolean
  canBeAutomaticallyBooked: boolean
  mySession?: string
  lastUsed?: string
  internalRef?: string
  connectorFormat?: string
  hasRemoteCapabilities: boolean
  powerType?: string
  tariffIds: ITariffIds[]
  evseStatus: [
    {
      network?: string
      status?: string
    },
  ]
  balancingInfo: IBalancingInfoSchema
}

export interface IPurchaseTariff {
  name: {
    type: string
  }
  description: {
    type: string
  }
  tariffType: {
    type: string
  }
  userId: {
    type: string
  }
  weekSchedule: [
    {
      weekDay?: string
      scheduleTime: [
        {
          value: number
          startTime?: string
          stopTime?: string
        },
      ]
    },
  ]
  purchaseTariffId: {
    type: string
  }
}

export interface INetwork {
  name?: string
  network?: string
  networkName?: string
  status?: string
  id?: string
  activationRequest: boolean
  publish: boolean
  party_id?: string
  country_code?: string
}

export interface IFiles {
  name?: string
  type?: string
  content?: string
  lastUpdated?: string
}

export interface IDiagnostics {
  content?: string
  lastUpdated?: string
}

export interface ICharger {
  id: { type: string; index: true }
  hwId?: string
  serialNumber?: string
  endpoint?: string
  meterValueSampleInterval?: string
  chargePointSerialNumber?: string
  firmwareVersion?: string
  iccid?: string
  imsi?: string
  meterSerialNumber?: string
  meterType?: string
  vendor?: string
  model?: string
  name: { type: string; index: true }
  parkingType?: string
  vehiclesType: [
    {
      vehicle?: string
    },
  ]
  timeZone?: string
  address: IAddress
  facilitiesTypes: []
  geometry: {
    type: string
    coordinates: number[]
  }
  instantBooking: boolean
  availability: IAvailability
  plugs: IPlugs
  accessType: string
  listOfGroups: [
    {
      groupName?: string
      groupId?: string
    },
  ]
  active: boolean
  rating: number
  numberOfSessions: number
  chargerType?: string
  status: string
  substatus?: string
  operationalStatus?: string
  netStatus: boolean
  infrastructure?: string
  hasInfrastructure: boolean
  chargingDistance: string
  imageContent: string[]
  defaultImage?: string
  createUser?: string
  createdBy?: string
  operatorId?: string
  modifyUser?: string
  infoPoints?: string
  heartBeat: Date
  heartBeatInterval: number
  bookings: any[]
  requireConfirmation: boolean
  allowRFID: boolean
  wifiPairingName?: string
  parkingSessionAfterChargingSession: boolean
  network: string
  partyId?: string
  operator?: string
  stationIdentifier?: string
  manufacturer?: string
  listOfFleets: [
    {
      fleetName?: string
      fleetId?: string
    },
  ]
  offlineNotification: boolean
  offlineEmailNotification?: string
  mapVisibility: boolean
  wrongBehaviorStation: boolean
  purchaseTariff: IPurchaseTariff
  internalInfo?: string
  CPE?: string
  clientName: string
  networks: INetwork[]
  voltageLevel: string
  locationType?: string
  energyOwner?: string
  CSE?: string
  energyNotes?: string
  supplyDate?: string
  installationDate?: string
  goLiveDate?: string
  warranty?: string
  expiration?: string
  preCheck?: string
  generateAction?: string
  acquisitionNotes?: string
  expectedLife?: string
  MTBF?: string
  workedHours?: string
  lifeCycleStatus?: string
  notify?: string
  lifeCycleNotes?: string
  siteLicense?: string
  legalLicenseDate?: string
  legalLicenseExpiry?: string
  legalSiteReminder?: string
  legalSiteNotes?: string
  inspection?: string
  lastInspection?: string
  nextInspection?: string
  legalInspectionReminder?: string
  legalInspectionNotes?: string
  connectionType?: string
  connectionOperator?: string
  connectionAPN?: string
  connectionLastLocationUpdate?: string
  connectionIpAddress?: string
  connectionDeviceId?: string
  connectionIMEILock?: string
  connectionIMEINumber?: string
  connectionDataComunicationChart?: string
  connectionStatus?: string
  connectionBlockedOperators?: string
  connectionConnectedNetwork?: string
  connectionTAGs?: string
  connectionIMSI?: string
  connectionMSISDN?: string
  connectionICCID?: string
  connectionStats?: string
  connectionDataTotal?: string
  connectivity?: string
  files: IFiles[]
  diagnostics: IDiagnostics[]
  energyManagementEnable: boolean
  energyManagementInterface?: string
  switchBoardId?: string
  controllerId?: string
}
