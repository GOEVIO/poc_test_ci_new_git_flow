import crypto from 'crypto';

const encrypt = (data: object, secret: Buffer) => {
    try {
        const iv = crypto.randomBytes(12);
        const cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);

        const json = JSON.stringify(data);

        let encrypted = cipher.update(json, 'utf8', 'base64');
        encrypted += cipher.final('base64');

        const authTag = cipher.getAuthTag();

        const payload = {
            iv: iv.toString('base64'),
            data: encrypted,
            tag: authTag.toString('base64'),
        };

        return Buffer.from(JSON.stringify(payload)).toString('base64url');
    } catch (error) {
        console.error("Error while generating hash link:", error);
        return null;
    }
};


const decrypt = (token: string, secret: Buffer) => {
    try {
    const raw = JSON.parse(Buffer.from(token, 'base64url').toString('utf8'));
    const iv = Buffer.from(raw.iv, 'base64');
    const tag = Buffer.from(raw.tag, 'base64');
  
    const decipher = crypto.createDecipheriv('aes-256-gcm', secret, iv);
    decipher.setAuthTag(tag);
  
    let decrypted = decipher.update(raw.data, 'base64', 'utf8');
    decrypted += decipher.final('utf8');
  
    return JSON.parse(decrypted);
  } catch (error) {
    console.error("Error while decrypting token:", error);
    return null;
  }
}

const createHash = (data: string, length: number = 40) => {
    return crypto.createHash('SHA256').update(data).digest('hex').substring(0, length).toUpperCase();
}

const scryptSync = (password: string, salt: string, keylen: number = 32) => {
    return crypto.scryptSync(password, salt, keylen);
}

export default {
    encrypt,
    decrypt,
    createHash,
    scryptSync
}