import { describe, expect, it, jest } from '@jest/globals';
import { StatusCodes } from 'http-status-codes';
import TINValidator from '../services/tinValidator';
import { TinType } from '../enums/TinType';

describe('TIN Validation', () => {

    describe('validViesVat', () => {
        it('should return true for a TIN with VIES VAT', async () => {
            const mock = jest.spyOn(TINValidator, 'validViesVat').mockResolvedValue(true);
            expect(await TINValidator.validViesVat('PT', '123456789')).toBe(true);
            mock.mockRestore();
        });

        it('should return false for a TIN without VIES VAT', async () => {
            const mock = jest.spyOn(TINValidator, 'validViesVat').mockResolvedValue(false);
            expect(await TINValidator.validViesVat('PT', '123456789')).toBe(false);
            mock.mockRestore();
        });
    });

    describe('getTaxIdPro', () => {
        it('should return true for valid Portuguese TIN', async () => {
            const mock = jest.spyOn(TINValidator, 'getTaxIdPro').mockResolvedValue({
                country_name: 'Portugal',
                tin_compact: '123456789',
                tin_standard: 'PT123456789',
                format_name: 'Standard',
                is_valid: true,
                message: 'Valid TIN',
                lookup_data: {
                    is_valid: false,
                    name: '',
                    address: ''
                }
            });

            expect(await TINValidator.getTaxIdPro('PT', '123456789')).toHaveProperty('is_valid', true);
            mock.mockRestore();
        });

        it('should return false for invalid Portuguese TIN', async () => {
            const mock = jest.spyOn(TINValidator, 'getTaxIdPro').mockResolvedValue({
                country_name: '',
                tin_compact: '',
                tin_standard: '',
                format_name: '',
                is_valid: false,
                message: 'Invalid TIN',
                lookup_data: {
                    is_valid: false,
                    name: '',
                    address: ''
                }
            });
            
            expect(await TINValidator.getTaxIdPro('PT', '123456789')).toHaveProperty('is_valid', false);
            mock.mockRestore();
        });

        it('should return true for a valid private TIN', async () => {
            const mock = jest.spyOn(TINValidator, 'getTaxIdPro').mockResolvedValue({
                country_name: 'Portugal',
                tin_compact: '123456789',
                tin_standard: 'PT123456789',
                format_name: 'Standard',
                is_valid: true,
                message: 'Valid TIN',
                lookup_data: {
                    is_valid: false,
                    name: '',
                    address: ''
                }
            });
            
            expect(await TINValidator.getTaxIdPro('PT', '123456789')).toMatchObject({
                is_valid: true,
                lookup_data: {
                    is_valid: false
                }
            });

            mock.mockRestore();
        });

        it('should return true for a valid business TIN', async () => {
            const mock = jest.spyOn(TINValidator, 'getTaxIdPro').mockResolvedValue({
                country_name: 'Portugal',
                tin_compact: '123456789',
                tin_standard: 'PT123456789',
                format_name: 'Standard',
                is_valid: true,
                message: 'Valid TIN',
                lookup_data: {
                    is_valid: true,
                    name: 'Portuguese Company',
                    address: '123 Main St, Lisbon, Portugal'
                }
            });

            expect(await TINValidator.getTaxIdPro('PT', '123456789')).toHaveProperty('lookup_data.is_valid', true);
            mock.mockRestore();
        });
    });

    describe('getClassification', () => {
        it('should return business TIN with VIES VAT', async () => {
            const mockViesVat = jest.spyOn(TINValidator, 'validViesVat').mockResolvedValue(true);
            const mockGetTaxIdPro = jest.spyOn(TINValidator, 'getTaxIdPro').mockResolvedValue({
                country_name: 'Portugal',
                tin_compact: '123456789',
                tin_standard: 'PT123456789',
                format_name: 'Standard',
                is_valid: true,
                message: 'Valid TIN',
                lookup_data: {
                    is_valid: true,
                    name: 'Portuguese Company',
                    address: '123 Main St, Lisbon, Portugal'
                }
            });

            expect(await TINValidator.getClassification('PT', '123456789')).toEqual({
                clientType: TinType.BUSINESS,
                viesVat: true
            });

            mockViesVat.mockRestore();
            mockGetTaxIdPro.mockRestore();
        });

        it('should return not found for invalid TIN', async () => {
            const mockViesVat = jest.spyOn(TINValidator, 'validViesVat').mockResolvedValue(false);
            const mockGetTaxIdPro = jest.spyOn(TINValidator, 'getTaxIdPro').mockResolvedValue({
                country_name: '',
                tin_compact: '',
                tin_standard: '',
                format_name: '',
                is_valid: false,
                message: 'Invalid TIN',
                lookup_data: {
                    is_valid: false,
                    name: '',
                    address: ''
                }
            });

            expect(await TINValidator.getClassification('PT', '123456789')).toHaveProperty('statusCode', StatusCodes.NOT_FOUND);

            mockViesVat.mockRestore();
            mockGetTaxIdPro.mockRestore();
        });

        it('should return business TIN without VIES VAT', async () => {
            const mockViesVat = jest.spyOn(TINValidator, 'validViesVat').mockResolvedValue(false);
            const mockGetTaxIdPro = jest.spyOn(TINValidator, 'getTaxIdPro').mockResolvedValue({
                country_name: 'Portugal',
                tin_compact: '123456789',
                tin_standard: 'PT123456789',
                format_name: 'Standard',
                is_valid: true,
                message: 'Valid TIN',
                lookup_data: {
                    is_valid: true,
                    name: 'Portuguese Company',
                    address: '123 Main St, Lisbon, Portugal'
                }
            });

            expect(await TINValidator.getClassification('PT', '123456789')).toEqual({
                clientType: TinType.BUSINESS,
                viesVat: false
            });

            mockViesVat.mockRestore();
            mockGetTaxIdPro.mockRestore();
        });

        
        it('should return private TIN without VIES VAT', async () => {
            const mockViesVat = jest.spyOn(TINValidator, 'validViesVat').mockResolvedValue(false);
            const mockGetTaxIdPro = jest.spyOn(TINValidator, 'getTaxIdPro').mockResolvedValue({
                country_name: 'Portugal',
                tin_compact: '123456789',
                tin_standard: 'PT123456789',
                format_name: 'Standard',
                is_valid: true,
                message: 'Valid TIN',
                lookup_data: {
                    is_valid: false,
                    name: '',
                    address: ''
                }
            });

            expect(await TINValidator.getClassification('PT', '123456789')).toEqual({
                clientType: TinType.PRIVATE,
                viesVat: false
            });

            mockViesVat.mockRestore();
            mockGetTaxIdPro.mockRestore();
        });
    });
});
