
import * as soap from 'soap';
import axios from 'axios';
import * as Sentry from '@sentry/node'

import { ServerError, NotFound } from '../error/error.handler.common';
import { providers } from '../constants';
import { TinType } from '../enums/TinType';

import { ITaxIdProResponse, IGetClassificationResponse } from '../interfaces/tinValidator.interface';
import { IError } from '../interfaces/error.interfaces';

class TINValidator {

    static validViesVat = async (countryCode: string, tinNumber: string): Promise<boolean> => {
        try {
            console.log(`[${this.name}][validViesVat][Start] ${JSON.stringify({ countryCode, tinNumber })}`);

            const client = await soap.createClientAsync(providers.europeCommission.wsdl);

            const response = await client.checkVatAsync({ countryCode, vatNumber: tinNumber });

            const invalidResponse = response.length === 0 || response[0].valid === undefined;

            if (invalidResponse) {
                console.log(`[${this.name}][validViesVat][Error] Invalid Response! ${JSON.stringify({ response })}`);
                throw new Error(`Invalid response from VIES`);
            }

            const valid = response[0]?.valid ?? false;

            console.log(`[${this.name}][validViesVat][Response] valid: ${valid}`);

            return valid;
        }
        catch (error: any) {
            throw ServerError({
                code: 'tin_validation_failed',
                message: error?.message || 'Error validating Tax Number',
            });
        }
    }

    static getTaxIdPro = async (country: string, tin: string): Promise<ITaxIdProResponse> => {
        try {
            console.log(`[${this.name}][getTaxIdPro][Start] ${JSON.stringify({ country, tin })}`);

            if (!process.env.TAXIDPRO_API_KEY) {
                console.error(`[${this.name}][getTaxIdPro][Error] Missing TAXIDPRO_API_KEY`);
                throw new Error(`Missing TAXIDPRO_API_KEY`);
            }

            const { data } = await axios.get<ITaxIdProResponse>(providers.taxIdPro.host, { params: { country, tin, api_key: process.env.TAXIDPRO_API_KEY } });

            const invalidResponse = data.is_valid === undefined || data.lookup_data === undefined || data.lookup_data.is_valid === undefined;

            if (invalidResponse) {
                console.warn(`[${this.name}][getTaxIdPro][Error] Invalid Format! ${JSON.stringify({ data })}`);
                throw new Error(`Invalid response`);
            }

            console.log(`[${this.name}][getTaxIdPro][Response] ${JSON.stringify({ data })}`);

            return data;

        } catch (error: any) {
            throw ServerError({
                code: 'tin_validation_failed',
                message: error?.message || 'Error validating Tax Number',
            });
        }
    }

    static getClassification = async (countryCode: string, tinNumber: string): Promise<IError | IGetClassificationResponse> => {
        console.log(`[${this.name}][getClassification][Start] ${JSON.stringify({ countryCode, tinNumber })}`);
        try {

            const validViesVat = await this.validViesVat(countryCode, tinNumber);

            if (validViesVat) {
                console.log(`[${this.name}][getClassification][Response] Company with viesVat!`);
                return { clientType: TinType.BUSINESS, viesVat: true };
            }

            const getTaxIdPro = await this.getTaxIdPro(countryCode, tinNumber);

            if (!getTaxIdPro.is_valid) {
                console.warn(`[${this.name}][getClassification][Response] validTaxIdPro is not valid!`);
                return NotFound({
                    code: 'tin_not_found',
                    message: `TIN not found`,
                });
            }

            if (getTaxIdPro.lookup_data.is_valid) {
                console.log(`[${this.name}][getClassification][Response] Company NOT viesVat!`);
                return { clientType: TinType.BUSINESS, viesVat: false };
            }

            console.log(`[${this.name}][getClassification][Response] Private NOT viesVat!`);

            return { clientType: TinType.PRIVATE, viesVat: false };
        }
        catch (error) {
            console.error(`[${this.name}][getClassification][Error] ${JSON.stringify(error)}`);
            Sentry.captureException(error);
            return ServerError({
                code: 'tin_validation_failed',
                message: 'Error validating Tax Number',
            });
        }
    }
}
export default TINValidator;