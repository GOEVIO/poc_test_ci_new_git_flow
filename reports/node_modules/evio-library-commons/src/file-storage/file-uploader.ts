import fs from "fs/promises";
import path from "path";
import {
    parseDataUrl,
    randomName,
    keyFromUrl,
    ensureDir,
    extFromContentType,
    safeJoin,
    getFileTypeFromUrl,
} from "./utils";
import { filePaths } from "../constants";
import type { IUploadOptions, IUploadResult } from "./types";

/**
 * Upload from base64 (dataURL or raw base64 string)
 */
export async function uploadBase64(
    data: string,
    opts: IUploadOptions = {}
): Promise<IUploadResult> {
    const baseFolder = filePaths[opts?.type || "root"];

    const { contentType: inferredCT, base64 } = parseDataUrl(data);
    const contentType = opts.contentType || inferredCT;

    const buffer = Buffer.from(base64, "base64");
    const ext = extFromContentType(contentType) || "";
    const key = `${opts.keyPrefix ?? ""}${opts.fileName ?? randomName(ext.replace(/^\./, ""))}`;

    const filePath = safeJoin(baseFolder.path, key);
    await ensureDir(path.dirname(filePath));
    await fs.writeFile(filePath, buffer);

    const url = `${baseFolder.url}/${key}`;
    return { bucket: "", key, url };
}

/**
 * Upload from Buffer
 */
export async function uploadBuffer(
    buffer: Buffer,
    opts: IUploadOptions = {}
): Promise<IUploadResult> {
    const baseFolder = filePaths[opts?.type || "root"];

    const key = `${opts.keyPrefix ?? ""}${opts.fileName ?? randomName()}`;
    const filePath = safeJoin(baseFolder.path, key);
    await ensureDir(path.dirname(filePath));
    await fs.writeFile(filePath, buffer);

    const url = `${baseFolder.url}/${key}`;
    return { bucket: "", key, url };
}

/** Delete by key (relative path inside ROOT) */
export async function deleteByKey(key: string, type?: keyof typeof filePaths): Promise<void> {
    const baseFolder = filePaths[type || "root"];
    const root = baseFolder.path;
    if (!root) throw new Error("Missing FILE_STORAGE_ROOT");
    const filePath = safeJoin(root, key);
    await fs.rm(filePath, { force: true });
}

/** Delete by public URL */
export async function deleteByUrl(url: string): Promise<void> {
    const type = getFileTypeFromUrl(url);
    const key = keyFromUrl(url);
    await deleteByKey(key, type);
}

/** Batch delete (multiple by URL) */
export async function deleteManyByUrl(urls: string[]): Promise<void> {
    if (!urls?.length) return;
    await Promise.all(urls.map((u) => deleteByUrl(u)));
}
