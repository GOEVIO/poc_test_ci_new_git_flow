/**
 * Ask ChatGPT (or any other) about function type interfaces in typescript.
 * I couldn't find an aticle dedicated to this feature and even doubt it has a name.
 * Related to callable objects.
 * 
 * Keep extending this interface with overloads as needed, follow the article in
 * the function definition below.
 */
interface Pipe {
  <A, B, C>(
    fn1: (a: A) => B,
    fn2: (b: B) => C
  ): (a: A) => C
}

/**
 * @see{@link https://dev.to/nexxeln/implementing-the-pipe-operator-in-typescript-30ip}
 * 
 * A function that takes any amount of functions (or an array of functions)
 * and return a new function that applies all these functions in order to a value.
 * 
 * Typescript will only be able to correctly infer types for the specific overrides
 * explicitly defined so far, feel free to add more overrides to the interface
 * above. But please read the article first not to break the implementation.
 * (or ask jesus)
 * 
 * @param {Function[]} fns - functions to be applied (can be an array or coma separated)
 */
export const pipe: Pipe = (...fns: Function[]) => (value: any) => {
  return fns.reduce(
    (prevResult, currentFunc) => currentFunc(prevResult),
    value
  )
}

export default pipe
