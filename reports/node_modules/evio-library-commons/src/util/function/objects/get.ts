/**
 * Curried Getter function.
 * See below link for more details on currying
 * @see{@link https://stackoverflow.com/questions/36314/what-is-currying}
 *
 * @param key the key to get the value from the object
 * @param obj the object to get the value from with the key
 * @return the value in the object at the key field
 */
const _curriedGet =
  <O, K extends keyof O>(key: K) =>
  (obj: O): O[K] => {
    return obj[key]
  }

/**
 * Overloaded, curried and generic function to get a value from an object with a key.
 * See below link for mor edetails on function overloading
 * @see{@link https://stackoverflow.com/questions/13212625/typescript-function-overloading}
 *
 * @param {K extends keyof O} key the key to get the value from the object
 * @param {O} obj the object to get the value from with the key
 * @return {O[K]} the value in the object at the key field
 *
 * TODO: Can be improved, for better type inference for example.
 * I'm open to suggestions
 */
export function get<O, K extends keyof O>(key: K): (obj: O) => O[K]
export function get<O, K extends keyof O>(key: K, obj: O): O[K]
export function get<O, K extends keyof O>(key: K, obj?: O): O[K] | ((obj: O) => O[K]) {
  if (!obj) {
    return _curriedGet<O, K>(key)
  }
  return _curriedGet<O, K>(key)(obj)
}

export default get
