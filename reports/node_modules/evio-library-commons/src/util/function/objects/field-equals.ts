import get from './get'
import equals from '../equals'

/**
 * Curried fieldEquals
 */
const _curriedFieldEquals =
  <K extends string|number, O extends Record<K, any>>(k: K, v: unknown) =>
  (o: O): boolean => {
    return equals(v, get(k, o))
  }

/**
 * Overloaded, curried and generic function to compare
 * the value of the field in an object with another value.
 * This is in fact a combination of function get and equals
 * both in this library.
 * 
 * @param {K extends string|number} k the key to get the value from the object.
 * @param {unknown} v the value to compare the object at the key with.
 * @param {O extends Record<K, any> | undefined} o the object to get the value in key to compare.
 * @returns {boolean} if o[k] === v, extracts the value of the key k in object o and compares it to value v.
 */
export function fieldEquals<K extends string|number, O extends Record<K, any>>(
  k: K, v: unknown
): ((o: O) => boolean)
export function fieldEquals<K extends string|number, O extends Record<K, any>>(
  k: K, v: unknown, o: O
): boolean
export function fieldEquals<K extends string|number, O extends Record<K, any>>(
  k: K, v: unknown, o?: O
): boolean | ((o: O) => boolean) {
  if (!o) {
    return _curriedFieldEquals<K, O>(k, v)
  } else {
    return _curriedFieldEquals<K, O>(k, v)(o)
  }
}

export default fieldEquals
