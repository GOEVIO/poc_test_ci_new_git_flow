import { describe, expect, it, vi, beforeEach } from 'vitest';
import axios from 'axios';
import { FileTransaction } from '../src/file.transalaction';

vi.mock('axios');
vi.mock('evio-library-commons', () => ({
  default: {
    ErrorHandlerCommon: {
      NotFound: vi.fn(),
      ServerError: vi.fn(),
    },
    Enums: {
      StatusCodeHttp: { NOT_FOUND: 404 },
      ClientNames: { EVIO: 'evio' },
    },
  },
}));

vi.mock('evio-library-configs', () => ({
  AppConfigurationReadRepository: {
    getAppConfigurationsByClient: vi.fn(),
  },
}));

vi.mock('evio-redis-connection', () => ({
  default: {
    connect: vi.fn().mockResolvedValue({}),
    get: vi.fn().mockResolvedValue({}),
    set: vi.fn().mockResolvedValue({}),
  },
}));

describe('FileTransaction', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('retrieveFileTransaction', () => {
    it('should successfully retrieve file transaction', async () => {
      axios.get = vi.fn().mockResolvedValueOnce({
        data: [{ MSG001: 'Hello' }],
      });

      const result = await FileTransaction.retriveFileTransactionAsHash({
        component: 'mobile',
        project: 'testProject',
        language: 'EN',
      });

      expect(result).toHaveProperty('translationHash');
    });

    it('should throw an error if no languages are found', async () => {
      axios.get = vi.fn().mockRejectedValueOnce({ data: [] });
      await expect(
        FileTransaction.retriveFileTransactionAsHash({
          component: 'mobile',
          project: 'testProject',
          language: 'EN',
        })
      ).rejects.toThrowError();
    });
  });

  describe('retrieveFileTranslationByLanguage', () => {
    it('should successfully retrieve file transaction for a language', async () => {
      axios.get = vi.fn().mockResolvedValue({ data: { MSG001: 'Hello' } });

      const result = await FileTransaction.retrieveFileTranslationByLanguage({
        component: 'mobile',
        project: 'testProject',
        language: 'EN',
      });

      expect(result).toEqual({ MSG001: 'Hello' });
    });

    it('should throw an error if no translations are found', async () => {
      axios.get = vi.fn().mockResolvedValue({ data: {} });
      try {
        await FileTransaction.retrieveFileTranslationByLanguage({
          component: 'mobile',
          project: 'testProject',
          language: 'EN',
        });
      } catch (error) {
        console.log(error);
        await expect(error).rejects.toThrow(
          'Component language file not found'
        );
      }
    });
  });
});
