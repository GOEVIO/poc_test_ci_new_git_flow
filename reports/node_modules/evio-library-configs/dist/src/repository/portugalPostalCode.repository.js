"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _a, _PortugalPostalCodeRepository_instance, _PortugalPostalCodeRepository_client, _PortugalPostalCodeRepository_collectionName;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortugalPostalCodeReadRepository = void 0;
const configsDb_connection_1 = require("../common/configsDb.connection");
const portugalPostalCode_schema_1 = require("../schema/portugalPostalCode.schema");
class PortugalPostalCodeRepository {
    constructor() {
        _PortugalPostalCodeRepository_client.set(this, configsDb_connection_1.ConfigsDbConnection);
        _PortugalPostalCodeRepository_collectionName.set(this, 'portugalpostalcodes');
    }
    static get instance() {
        if (!__classPrivateFieldGet(_a, _a, "f", _PortugalPostalCodeRepository_instance)) {
            __classPrivateFieldSet(_a, _a, new _a(), "f", _PortugalPostalCodeRepository_instance);
        }
        return __classPrivateFieldGet(_a, _a, "f", _PortugalPostalCodeRepository_instance);
    }
    async findOneByPostalCode(postalCode) {
        const document = await __classPrivateFieldGet(this, _PortugalPostalCodeRepository_client, "f").findOne(__classPrivateFieldGet(this, _PortugalPostalCodeRepository_collectionName, "f"), {
            postalCodes: postalCode,
        });
        const wrapper = portugalPostalCode_schema_1.PortugalPostalCodeSchema.safeParse(document);
        if (!wrapper.success) {
            return undefined;
        }
        return wrapper.data;
    }
}
_a = PortugalPostalCodeRepository, _PortugalPostalCodeRepository_client = new WeakMap(), _PortugalPostalCodeRepository_collectionName = new WeakMap();
_PortugalPostalCodeRepository_instance = { value: void 0 };
exports.PortugalPostalCodeReadRepository = PortugalPostalCodeRepository.instance;
//# sourceMappingURL=portugalPostalCode.repository.js.map