
import { ConfigsDbConnection } from '../common/configsDb.connection'
import {
  AppConfiguration,
  AppConfigurationSchema,
} from '../schema/appConfiguration.schema'

class AppConfigurationRepository {
  static #instance: AppConfigurationRepository
  #client = ConfigsDbConnection
  #collectionName = 'appconfigurations'

  private constructor() {}

  public static get instance(): AppConfigurationRepository {
    if (!AppConfigurationRepository.#instance) {
      AppConfigurationRepository.#instance = new AppConfigurationRepository()
    }
    return AppConfigurationRepository.#instance
  }

  /**
   * Retrieves app configurations with a specific client name.
   * @async
   * @param {String} clientName - Client name to filter by.
   * @returns {Promise<Array<Object>>} App configuration documents matching the client name.
   */
  async getAppConfigurationsByClient(
    clientName: string
  ): Promise<AppConfiguration | undefined> {
    try {
      const document = await this.#client.findOne(this.#collectionName, {
        clientName,
      })
      const wrapper = AppConfigurationSchema.safeParse(document)
      if (!wrapper.success) {
        console.log('not found or malformed app configuration', wrapper.error)
        return undefined
      }
      return wrapper.data
    } catch (error) {
      console.log('Error retrieving app configurations:', error)
      throw error
    }
  }

    /**
   * Retrieves app configurations with a specific client name.
   * @async
   * @returns {Promise<Array<Object>>} App configuration documents matching the client name.
   */
    async getAppConfigurations(): Promise<AppConfiguration[] | undefined> {
      try {
        const document = await this.#client.findMany(this.#collectionName, {})
        console.log('document', document)
        return document as AppConfiguration[]
      } catch (error) {
        console.log('Error retrieving app configurations:', error)
        throw error
      }
    }
}

export const AppConfigurationReadRepository =
  AppConfigurationRepository.instance
