import dbConnection from 'evio-library-connections'
import { CollectionNames, DBNames } from 'evio-library-commons'
import { FeeReadRepository } from '../repository/fee.repository'
import { PortugalPostalCodeReadRepository } from '../repository/portugalPostalCode.repository'
import { PortugalDistrictReadRepository } from '../repository/portugalDistrict.repository'
let conn: any
;(async () => {
  conn = await dbConnection.connect(DBNames.Configs)
})()

export const retrieveFees = async () => {
  try {
    return await dbConnection.findDocuments(
      conn.db,
      CollectionNames.Configs.Fees,
      {}
    )
  } catch (error) {
    throw error
  }
}

export const getFees = async (countryCode: string, zipCode: string) => {
  const postalCode = zipCode?.split('-')?.[0] ?? ''
  const fee =
    countryCode !== 'PT'
      ? await FeeReadRepository.findOneByCountryCode(countryCode)
      : await FeeReadRepository.findOneByCountryCodeAndZone(
          countryCode,
          await getOrDefaultPortugalZone(postalCode)
        )

  return fee
}

export const getOrDefaultPortugalZone = async (
  zipCode?: string
): Promise<string> => {
  if (!zipCode) {
    return 'Portugal'
  }

  const ptPostCode =
    await PortugalPostalCodeReadRepository.findOneByPostalCode(zipCode)
  if (!ptPostCode) {
    return 'Portugal'
  }

  const ptDistrict = await PortugalDistrictReadRepository.findOneByCode(
    ptPostCode.districtCode
  )
  if (!ptDistrict) {
    return 'Portugal'
  }

  return ptDistrict.zone
}
