import dbConnection from 'evio-library-connections'
import { DBNames } from 'evio-library-commons'
import redisConnection from 'evio-redis-connection'
import { Country, CountrySchema } from '../schema/country.schema'

let conn: any
;(async () => {
  conn = await dbConnection.connect(DBNames.Configs)
})()

export const retrieveCountryByCountryCode = async (
  countryCode: string
): Promise<Partial<Country> | null> => {
  console.log('retrieveCountryByCountryCode', countryCode)
  try {
    const cacheKey = `countryNameByCountryCode:${countryCode}`

    const cached = await redisConnection.get(cacheKey)

    if (cached) {
      return JSON.parse(cached)
    }

    const document = await dbConnection.findOneDocument(conn.db, 'countries', {
      countryCode,
    })

    const countryWrapper = CountrySchema.safeParse(document)

    if (!countryWrapper.success) {
      console.error('The country is invalid!', countryWrapper.error)
      throw countryWrapper.error
    }

    const countryData = {
      countryCode: countryWrapper.data.countryCode,
      countryName: countryWrapper.data.countryName,
      numericCode: countryWrapper.data.numericCode,
      country: countryWrapper.data.country,
    }

    await redisConnection.set(cacheKey, JSON.stringify(countryData))

    return countryData
  } catch (error) {
    console.error('Error retrieving country code:', error)
    return null
  }
}
