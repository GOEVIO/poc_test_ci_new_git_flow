name: Deploy (manual) to Dev/QA

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Ambiente de destino"
        type: choice
        options: [dev, qa]
        default: dev
      services:
        description: "Serviços (all ou lista separada por vírgulas)"
        default: "all"

permissions:
  id-token: write
  contents: read
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout ref selecionada no UI
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Configurar AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Who am I (debug)
        run: aws sts get-caller-identity

      - name: Instalar jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Disparar pipelines existentes (override Source) — formato novo
        env:
          GIT_SHA: ${{ github.sha }}         # commit exato da branch escolhida no UI
          ENV: ${{ inputs.environment }}     # dev|qa (só para approvals do Actions)
          SERVICES: ${{ inputs.services }}   # all ou "svcA,svcB"
        run: |
          set -euo pipefail

          test -f .ci/services.json || { echo "Falta .ci/services.json"; exit 1; }
          jq . .ci/services.json > /dev/null

          # obter lista de serviços a partir do JSON
          if [ "$SERVICES" = "all" ]; then
            mapfile -t SERVICES_LIST < <(jq -r '.services[].name' .ci/services.json)
          else
            # normalizar vírgulas → espaços
            read -ra WANT <<<"$(echo "$SERVICES" | tr ',' ' ')"
            # interseção entre WANT e os que existem no ficheiro
            mapfile -t EXISTING < <(jq -r '.services[].name' .ci/services.json)
            SERVICES_LIST=()
            for w in "${WANT[@]}"; do
              for e in "${EXISTING[@]}"; do
                if [ "$w" = "$e" ]; then SERVICES_LIST+=("$w"); fi
              done
            done
          fi

          if [ ${#SERVICES_LIST[@]} -eq 0 ]; then
            echo "Nenhum serviço para implantar."; exit 0
          fi

          echo "Deploy do commit $GIT_SHA (env=$ENV) para serviços: ${SERVICES_LIST[*]}"

          for SVC in "${SERVICES_LIST[@]}"; do
            PIPELINE=$(jq -r --arg s "$SVC" '.services[] | select(.name==$s) | .pipeline' .ci/services.json)

            if [ -z "$PIPELINE" ] || [ "$PIPELINE" = "null" ]; then
              echo "[WARN] Sem pipeline mapeada para $SVC. A saltar."
              continue
            fi

            echo "[CD] $SVC -> $PIPELINE"
            aws codepipeline start-pipeline-execution \
              --name "$PIPELINE" \
              --source-revisions "[{\"actionName\":\"Source\",\"revision\":\"$GIT_SHA\"}]" \
              --query pipelineExecutionId --output text
          done
